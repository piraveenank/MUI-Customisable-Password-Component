{"version":3,"file":"CustomisablePassword.js","sourceRoot":"","sources":["../../src/utils/CustomisablePassword.tsx"],"names":[],"mappings":"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","sourcesContent":["import { LinearProgress } from \"@mui/material\";\nimport React, { useState, useEffect, useMemo } from \"react\";\n\nimport { PasswordRequirementComponent } from \"./PasswordRequirementComponent\";\nimport {\n  MUI_CustomisablePasswordProps,\n  PasswordRequirementNames,\n} from \"./types\";\n\nconst MUICustomisablePasswordComponent: React.FC<\n  MUI_CustomisablePasswordProps\n> = ({\n  rules = {},\n  value,\n  minLength = 8,\n  maxLength = 16,\n  onChange,\n  specialCharactersRegex = /[~`¿¡!#$%&*€£@+÷=[\\]\\\\';,/{}()|\\\\\":<>?._]/g,\n  passwordStrengthBar = true,\n  successColourProgressBar = \"#4caf50\",\n  warningColourProgressBar = \"#f5333f\",\n  ...remainingProps\n}) => {\n  const [isValid, setIsValid] = useState(false);\n\n  if (maxLength < minLength) {\n    maxLength = minLength + 1;\n  }\n  const passwordRequirementDefinitions = useMemo(\n    () => ({\n      minLength: {\n        valid: value.length >= minLength,\n        label:\n          rules.minLength?.label ||\n          `Must be at least ${minLength} characters long.`,\n      },\n      maxLength: {\n        valid: value.length <= maxLength && value.length > 0,\n        label:\n          rules.maxLength?.label || `Must not exceed ${maxLength} characters.`,\n      },\n      specialChar: {\n        valid: specialCharactersRegex.test(value),\n        label:\n          rules.specialChar?.label ||\n          `Must contain at least one special character (${specialCharactersRegex\n            .toString()\n            .replace(\"/[\", \"\")\n            .replace(\"]/g\", \"\")}).`,\n      },\n      number: {\n        valid: /\\d/g.test(value),\n        label: rules.number?.label || \"Must contain at least one number.\",\n      },\n      capital: {\n        valid: /[A-Z]/.test(value),\n        label:\n          rules.capital?.label || \"Must contain at least one uppercase letter.\",\n      },\n      lowercase: {\n        valid: /[a-z]/.test(value),\n        label:\n          rules.lowercase?.label ||\n          \"Must contain at least one lowercase letter.\",\n      },\n      letter: {\n        valid: /[a-zA-Z]/.test(value),\n        label: rules.letter?.label || \"Must contain at least one letter.\",\n      },\n      notEmpty: {\n        valid: Boolean(value.length > 0),\n        label: rules.notEmpty?.label || \"Cannot be empty.\",\n      },\n    }),\n    [value, minLength, maxLength, specialCharactersRegex, rules]\n  );\n\n  const enabledRules =\n    Object.keys(rules).length === 0\n      ? Object.keys(passwordRequirementDefinitions)\n      : Object.keys(rules).filter((rule) =>\n          Boolean(\n            passwordRequirementDefinitions[rule as PasswordRequirementNames]\n          )\n        );\n\n  const filteredObject = Object.fromEntries(\n    Object.entries(passwordRequirementDefinitions).filter(([key]) =>\n      enabledRules.includes(key)\n    )\n  );\n\n  const calculatePasswordStrength = () => {\n    const fulfilledRulesCount = enabledRules.reduce(\n      (count, rule) =>\n        passwordRequirementDefinitions[rule as PasswordRequirementNames].valid\n          ? count + 1\n          : count,\n      0\n    );\n\n    return Math.floor((fulfilledRulesCount / enabledRules.length) * 100);\n  };\n\n  const passwordStrength = calculatePasswordStrength();\n\n  useEffect(() => {\n    const isAllRulesValid = enabledRules.every(\n      (rule) =>\n        passwordRequirementDefinitions[rule as PasswordRequirementNames].valid\n    );\n    setIsValid(isAllRulesValid);\n\n    if (typeof onChange === \"function\") {\n      onChange({\n        Rules: filteredObject,\n        \"Password Meet Requirements\": isValid,\n        \"Password Strength\": passwordStrength,\n      });\n    }\n  }, [\n    value,\n    enabledRules,\n    onChange,\n    passwordRequirementDefinitions,\n    isValid,\n    filteredObject,\n    passwordStrength,\n  ]);\n\n  return (\n    <div>\n      {passwordStrengthBar && (\n        <LinearProgress\n          variant=\"determinate\"\n          value={passwordStrength}\n          sx={{\n            borderRadius: \"25px\",\n            height: \"10px\",\n            \"& .MuiLinearProgress-barColorPrimary\": {\n              backgroundColor:\n                passwordStrength === 100\n                  ? successColourProgressBar\n                  : warningColourProgressBar,\n            },\n          }}\n        />\n      )}\n      {enabledRules.map((rule) => {\n        const { label, valid } =\n          passwordRequirementDefinitions[rule as PasswordRequirementNames];\n        return (\n          <PasswordRequirementComponent\n            key={rule}\n            valid={valid}\n            validColour=\"#4caf50\"\n            defaultColour=\"#f5333f\"\n            {...remainingProps}>\n            {label}\n          </PasswordRequirementComponent>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default MUICustomisablePasswordComponent;\n"]}